{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/code-state-validation.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Code State Validation AI agent.\n *\n * - codeStateValidation - A function that handles the code state validation process.\n * - CodeStateValidationInput - The input type for the codeStateValidation function.\n * - CodeStateValidationOutput - The return type for the codeStateValidation function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst CodeStateValidationInputSchema = z.object({\n  code: z.string().describe('The code to validate.'),\n  fsmDefinition: z\n    .string() // Assuming FSM definition is passed as a string, could be JSON or other format\n    .describe('The FSM definition in a suitable format (e.g., JSON).'),\n});\nexport type CodeStateValidationInput = z.infer<typeof CodeStateValidationInputSchema>;\n\nconst CodeStateValidationOutputSchema = z.object({\n  isValid: z.boolean().describe('Whether the code is valid according to the FSM.'),\n  validationResult: z\n    .string()\n    .describe('A description of the validation result, including any errors found.'),\n});\nexport type CodeStateValidationOutput = z.infer<typeof CodeStateValidationOutputSchema>;\n\nexport async function codeStateValidation(input: CodeStateValidationInput): Promise<CodeStateValidationOutput> {\n  return codeStateValidationFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'codeStateValidationPrompt',\n  input: {schema: CodeStateValidationInputSchema},\n  output: {schema: CodeStateValidationOutputSchema},\n  prompt: `You are a code validation expert. You will receive a code snippet and an FSM definition. Your task is to determine if the code follows the state transitions defined in the FSM and is structurally sound according to it.\\n\\nCode:\\n\\n\\`\\`\\`{{{code}}}\n\\`\\`\\`\\n\\nFSM Definition:\\n\\n{{{fsmDefinition}}}\n\\n\\nBased on this, determine if the code is valid, and provide a detailed validation result.  Include specific details on which states it follows and which it violates. Set the \nisValid output field appropriately.`,\n});\n\nconst codeStateValidationFlow = ai.defineFlow(\n  {\n    name: 'codeStateValidationFlow',\n    inputSchema: CodeStateValidationInputSchema,\n    outputSchema: CodeStateValidationOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,eAAe,uIAAA,CAAA,IAAC,CACb,MAAM,GAAG,+EAA+E;KACxF,QAAQ,CAAC;AACd;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CAAC;AACd;AAGO,eAAe,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;mCAGwB,CAAC;AACpC;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAvBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/yaml-parsing-fsm.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A YAML parsing AI agent implemented as a Finite State Machine (FSM).\n *\n * - parseYamlWithFSM - A function that parses YAML input using an FSM.\n * - YamlParsingFSMInput - The input type for the parseYamlWithFSM function.\n * - YamlParsingFSMOutput - The return type for the parseYamlWithFSM function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst YamlParsingFSMInputSchema = z\n  .string()\n  .describe('The YAML input to be parsed.');\n\nexport type YamlParsingFSMInput = z.infer<typeof YamlParsingFSMInputSchema>;\n\nconst YamlParsingFSMOutputSchema = z.object({\n  isValid: z.boolean().describe('Whether the YAML is valid according to the FSM.'),\n  parsedYaml: z.record(z.string(), z.any()).optional().describe('The parsed YAML object if valid, otherwise undefined.'),\n  errorMessage: z.string().optional().describe('An error message if the YAML is invalid.'),\n});\n\nexport type YamlParsingFSMOutput = z.infer<typeof YamlParsingFSMOutputSchema>;\n\nexport async function parseYamlWithFSM(input: YamlParsingFSMInput): Promise<YamlParsingFSMOutput> {\n  return yamlParsingFSMFlow(input);\n}\n\nconst yamlParsingFSMPrompt = ai.definePrompt({\n  name: 'yamlParsingFSMPrompt',\n  input: {schema: YamlParsingFSMInputSchema},\n  output: {schema: YamlParsingFSMOutputSchema},\n  prompt: `You are a YAML parser implemented as a Finite State Machine.\n  Your job is to determine if the input YAML is valid and, if so, return a parsed YAML object. If not valid, return an error message.\n\n  Input YAML:\\n{{{input}}}`,\n});\n\nconst yamlParsingFSMFlow = ai.defineFlow(\n  {\n    name: 'yamlParsingFSMFlow',\n    inputSchema: YamlParsingFSMInputSchema,\n    outputSchema: YamlParsingFSMOutputSchema,\n  },\n  async input => {\n    try {\n      // Basic YAML parsing logic (can be enhanced with FSM-like validation)\n      const yaml = require('js-yaml');\n      const parsedYaml = yaml.load(input);\n      return {\n        isValid: true,\n        parsedYaml: parsedYaml as any,\n      };\n    } catch (e: any) {\n      return {\n        isValid: false,\n        errorMessage: e.message,\n      };\n    }\n  }\n);\n\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAChC,MAAM,GACN,QAAQ,CAAC;AAIZ,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,uIAAA,CAAA,IAAC,CAAC,GAAG,IAAI,QAAQ,GAAG,QAAQ,CAAC;IAC9D,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC/C;AAIO,eAAe,iBAAiB,KAA0B;IAC/D,OAAO,mBAAmB;AAC5B;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC3C,MAAM;IACN,OAAO;QAAC,QAAQ;IAAyB;IACzC,QAAQ;QAAC,QAAQ;IAA0B;IAC3C,QAAQ,CAAC;;;0BAGe,CAAC;AAC3B;AAEA,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACtC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,IAAI;QACF,sEAAsE;QACtE,MAAM;QACN,MAAM,aAAa,KAAK,IAAI,CAAC;QAC7B,OAAO;YACL,SAAS;YACT,YAAY;QACd;IACF,EAAE,OAAO,GAAQ;QACf,OAAO;YACL,SAAS;YACT,cAAc,EAAE,OAAO;QACzB;IACF;AACF;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 427, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/automated-workflow-with-code-bot-fsm.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agentic workflow assistant using Finite State Machines (FSM). This file exports the\n * `automatedWorkflowWithCodeBotFSM` function, which enables developers to build more productive and reliable AI-assisted\n * coding workflows by defining and managing states, transitions, and actions within a Genkit flow.\n *\n * - automatedWorkflowWithCodeBotFSM - The main function to orchestrate the FSM-driven coding workflow.\n * - AutomatedWorkflowWithCodeBotFSMInput - The input type for the automatedWorkflowWithCodeBotFSM function.\n * - AutomatedWorkflowWithCodeBotFSMOutput - The return type for the automatedWorkflowWithCodeBotFSM function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AutomatedWorkflowWithCodeBotFSMInputSchema = z.object({\n  taskDescription: z.string().describe('The description of the coding task to be performed.'),\n});\nexport type AutomatedWorkflowWithCodeBotFSMInput = z.infer<typeof AutomatedWorkflowWithCodeBotFSMInputSchema>;\n\nconst AutomatedWorkflowWithCodeBotFSMOutputSchema = z.object({\n  generatedCode: z.string().describe('The final generated code from the FSM-driven workflow.'),\n  workflowSummary: z.string().describe('A summary of the steps and states traversed during the workflow.'),\n});\nexport type AutomatedWorkflowWithCodeBotFSMOutput = z.infer<typeof AutomatedWorkflowWithCodeBotFSMOutputSchema>;\n\nexport async function automatedWorkflowWithCodeBotFSM(input: AutomatedWorkflowWithCodeBotFSMInput): Promise<AutomatedWorkflowWithCodeBotFSMOutput> {\n  return automatedWorkflowWithCodeBotFSMFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'codeBotFSMPrompt',\n  input: {\n    schema: z.object({\n      taskDescription: z.string(),\n      currentState: z.string(),\n      previousCode: z.string().optional(),\n    }),\n  },\n  output: {\n    schema: z.object({\n      nextState: z.string().describe('The next state in the FSM workflow.'),\n      agentAction: z.string().describe('The action to be performed by the agent.'),\n      generatedCode: z.string().describe('The code generated or modified in this step.'),\n      reasoning: z.string().describe('Explanation of the agent action and state transition.'),\n    }),\n  },\n  prompt: `You are a code bot operating within a finite state machine.\nYour task is to assist in generating code based on the user provided description, working one state at a time.\n\nYou are currently in state: {{{currentState}}}\nTask Description: {{{taskDescription}}}\n\nPrevious Code (if any):\\n{{{previousCode}}}\n\nBased on the current state, determine the next appropriate state and the action to take. Ensure that each transition moves toward completion of the overall task.\n\nPossible states: Input, Draft, Correct, Validate, Done\n\nOutput the next state, the action, the generated code, and a reasoning for the next state transition.\n\nExample Output Format:\n{\n  \"nextState\": \"Draft\",\n  \"agentAction\": \"Generate initial code draft\",\n  \"generatedCode\": \"\",\n  \"reasoning\": \"Initial code generation required to begin the task.\"\n}\n`,\n});\n\nconst automatedWorkflowWithCodeBotFSMFlow = ai.defineFlow(\n  {\n    name: 'automatedWorkflowWithCodeBotFSMFlow',\n    inputSchema: AutomatedWorkflowWithCodeBotFSMInputSchema,\n    outputSchema: AutomatedWorkflowWithCodeBotFSMOutputSchema,\n  },\n  async input => {\n    let currentState = 'Input';\n    let generatedCode = '';\n    let workflowSummary = '';\n    let stepCount = 0;\n\n    while (currentState !== 'Done' && stepCount < 10) { // Limiting steps to avoid infinite loops\n      stepCount++;\n      const {output} = await prompt({\n        taskDescription: input.taskDescription,\n        currentState: currentState,\n        previousCode: generatedCode,\n      });\n\n      if (!output) {\n        throw new Error('Prompt returned no output.');\n      }\n\n      currentState = output.nextState;\n      generatedCode = output.generatedCode;\n      workflowSummary += `Step ${stepCount}: State=${output.nextState}, Action=${output.agentAction}, Reasoning=${output.reasoning}\\n`;\n    }\n\n    return {\n      generatedCode: generatedCode,\n      workflowSummary: workflowSummary,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;;CAQC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6CAA6C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1D,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,8CAA8C,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3D,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGO,eAAe,gCAAgC,KAA2C;IAC/F,OAAO,oCAAoC;AAC7C;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM;YACzB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;YACtB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACnC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAC/B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACjC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YACnC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACjC;IACF;IACA,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;AAqBX,CAAC;AACD;AAEA,MAAM,sCAAsC,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,IAAI,eAAe;IACnB,IAAI,gBAAgB;IACpB,IAAI,kBAAkB;IACtB,IAAI,YAAY;IAEhB,MAAO,iBAAiB,UAAU,YAAY,GAAI;QAChD;QACA,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;YAC5B,iBAAiB,MAAM,eAAe;YACtC,cAAc;YACd,cAAc;QAChB;QAEA,IAAI,CAAC,QAAQ;YACX,MAAM,IAAI,MAAM;QAClB;QAEA,eAAe,OAAO,SAAS;QAC/B,gBAAgB,OAAO,aAAa;QACpC,mBAAmB,CAAC,KAAK,EAAE,UAAU,QAAQ,EAAE,OAAO,SAAS,CAAC,SAAS,EAAE,OAAO,WAAW,CAAC,YAAY,EAAE,OAAO,SAAS,CAAC,EAAE,CAAC;IAClI;IAEA,OAAO;QACL,eAAe;QACf,iBAAiB;IACnB;AACF;;;IA9EoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 537, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport {\n  codeStateValidation,\n  type CodeStateValidationInput,\n} from '@/ai/flows/code-state-validation';\nimport {\n  parseYamlWithFSM,\n  type YamlParsingFSMInput,\n} from '@/ai/flows/yaml-parsing-fsm';\nimport {\n  automatedWorkflowWithCodeBotFSM,\n  type AutomatedWorkflowWithCodeBotFSMInput,\n} from '@/ai/flows/automated-workflow-with-code-bot-fsm';\n\nexport async function validateCodeStateAction(\n  input: CodeStateValidationInput\n) {\n  try {\n    const result = await codeStateValidation(input);\n    return { success: true, data: result };\n  } catch (error) {\n    return { success: false, error: (error as Error).message };\n  }\n}\n\nexport async function parseYamlAction(input: YamlParsingFSMInput) {\n  try {\n    const result = await parseYamlWithFSM(input);\n    return { success: true, data: result };\n  } catch (error) {\n    return { success: false, error: (error as Error).message };\n  }\n}\n\nexport async function runCodeBotWorkflowAction(\n  input: AutomatedWorkflowWithCodeBotFSMInput\n) {\n  try {\n    const result = await automatedWorkflowWithCodeBotFSM(input);\n    return { success: true, data: result };\n  } catch (error) {\n    return { success: false, error: (error as Error).message };\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAEA;AAIA;AAIA;;;;;;;AAKO,eAAe,wBACpB,KAA+B;IAE/B,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,iJAAA,CAAA,sBAAmB,AAAD,EAAE;QACzC,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,SAAS;YAAO,OAAO,AAAC,MAAgB,OAAO;QAAC;IAC3D;AACF;AAEO,eAAe,gBAAgB,KAA0B;IAC9D,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,4IAAA,CAAA,mBAAgB,AAAD,EAAE;QACtC,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,SAAS;YAAO,OAAO,AAAC,MAAgB,OAAO;QAAC;IAC3D;AACF;AAEO,eAAe,yBACpB,KAA2C;IAE3C,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,yKAAA,CAAA,kCAA+B,AAAD,EAAE;QACrD,OAAO;YAAE,SAAS;YAAM,MAAM;QAAO;IACvC,EAAE,OAAO,OAAO;QACd,OAAO;YAAE,SAAS;YAAO,OAAO,AAAC,MAAgB,OAAO;QAAC;IAC3D;AACF;;;IA7BsB;IAWA;IASA;;AApBA,+OAAA;AAWA,+OAAA;AASA,+OAAA","debugId":null}},
    {"offset": {"line": 610, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {validateCodeStateAction as '406896be9584f52224120cbcf3024826a1154ac4dc'} from 'ACTIONS_MODULE0'\nexport {parseYamlAction as '4089d91f048e08a60475ed18fd464bea3858f888ca'} from 'ACTIONS_MODULE0'\nexport {runCodeBotWorkflowAction as '40ae6912e6f916bcf83e16b2cbeb5019aef8c8137a'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 682, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 696, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}