# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : ProofOfConcept.sm

import statemap


class ProofOfConceptState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def fail(self, fsm):
        self.Default(fsm)

    def reset(self, fsm):
        self.Default(fsm)

    def start(self, fsm):
        self.Default(fsm)

    def succeed(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class ProofOfConceptMap_Default(ProofOfConceptState):
    pass

class ProofOfConceptMap_Idle(ProofOfConceptMap_Default):

    def start(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.start_processing()
        finally:
            fsm.setState(ProofOfConceptMap.Processing)
            fsm.getState().Entry(fsm)

class ProofOfConceptMap_Processing(ProofOfConceptMap_Default):

    def fail(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.process_failed()
        finally:
            fsm.setState(ProofOfConceptMap.Failure)
            fsm.getState().Entry(fsm)

    def succeed(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.process_succeeded()
        finally:
            fsm.setState(ProofOfConceptMap.Success)
            fsm.getState().Entry(fsm)

class ProofOfConceptMap_Success(ProofOfConceptMap_Default):

    def reset(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.reset_to_idle()
        finally:
            fsm.setState(ProofOfConceptMap.Idle)
            fsm.getState().Entry(fsm)

class ProofOfConceptMap_Failure(ProofOfConceptMap_Default):

    def reset(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.reset_to_idle()
        finally:
            fsm.setState(ProofOfConceptMap.Idle)
            fsm.getState().Entry(fsm)

class ProofOfConceptMap(object):

    Idle = ProofOfConceptMap_Idle('ProofOfConceptMap.Idle', 0)
    Processing = ProofOfConceptMap_Processing('ProofOfConceptMap.Processing', 1)
    Success = ProofOfConceptMap_Success('ProofOfConceptMap.Success', 2)
    Failure = ProofOfConceptMap_Failure('ProofOfConceptMap.Failure', 3)
    Default = ProofOfConceptMap_Default('ProofOfConceptMap.Default', -1)

class ProofOfConcept_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, ProofOfConceptMap.Idle)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
